{"version":3,"file":"react_components_Forms_js-react_layouts_Page_js.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAMA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AArBA;AAwBA;;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAEA;;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAEA;;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAEA;;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAEA;;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAEA;;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;AAEA;;;;;;;;;;;;;;;;;ACzcA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;AC1DA;;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;;;;;;;;;;;;;;;ACVA;;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AAEA;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AACA;;;AAEA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAMA;;AAEA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AArBA;AAwBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA","sources":["webpack://ad-manager/./react/components/ApiErrors.js","webpack://ad-manager/./react/components/Forms.js","webpack://ad-manager/./react/components/Modal.js","webpack://ad-manager/./react/components/TextError.js","webpack://ad-manager/./react/layouts/Footer.js","webpack://ad-manager/./react/layouts/Header.js","webpack://ad-manager/./react/layouts/Page.js","webpack://ad-manager/./react/utility/Api.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst ApiErrors = ({ errors }) => {\r\n  return (\r\n    <>\r\n      {errors.length > 0 && errors.map((error, index) => (\r\n        <div key={index} className=\"alert alert-danger mt-4\" role=\"alert\">\r\n          {error.error}\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ApiErrors;","import React, { useState, useEffect, useContext, useRef } from 'react';\r\n\r\nimport { ApiRequest, handleErrors, handleSuccess } from '../utility/Api';\r\nimport { GlobalContext } from '../GlobalContext';\r\nimport Modal from '../components/Modal';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport TextError from '../components/TextError';\r\nimport { DisplayFormikState } from '../utility/Helpers';\r\nimport ApiErrors from './ApiErrors';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport { DateTime } from \"luxon\";\r\nimport Select from 'react-select'\r\n\r\n\r\n\r\nconst Forms = ({slot, ad}) => {\r\n\r\n  const { token, logout, redirect, setToken } = useContext(GlobalContext);\r\n  const [apiErrors, setApiErrors] = useState([]);\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const [options, setOptions] = useState([])\r\n\r\n  const addSlotInitialValues = { name: \"\" };\r\n  const deleteSlotInitialValues = { name: slot ? slot.name : \"\" };\r\n  const updateSlotInitialValues = { name: slot ? slot.name : \"\" };\r\n\r\n  const addAdInitialValues = { \r\n    title: \"\", \r\n    slot: \"\", \r\n    image: \"\", \r\n    link: \"\", \r\n    start: \"\", \r\n    end: \"\" \r\n  }; \r\n\r\n  const updateAdInitialValues = { \r\n    title: ad ? ad.title : \"\", \r\n    slot:  ad ? ad.slot_id : \"\", \r\n    image: \"\", \r\n    link:  ad ? ad.link : \"\", \r\n    start: ad ? DateTime.fromISO(ad.start_date) : \"\",\r\n    end: ad ? ad.end_date : \"\"\r\n  }; \r\n\r\n  const deleteAdInitialValues = { title: ad ? ad.name : \"\" };\r\n\r\n  const addSlotSchema = yup.object({\r\n    name: yup.string().required('Slot name is required.').min(4, \"Slot name is too short.\")\r\n  });\r\n  const updateSlotSchema = yup.object({\r\n    name: yup.string().required('Slot name is required.').min(4, \"Slot name is too short.\")\r\n  });\r\n\r\n  const addAdSchema = yup.object({\r\n    title: yup.string().required('Title is required.').min(4, \"Title is too short.\"),\r\n    slot: yup.string().required('Slot is required.'),\r\n    image: yup.string().required('Image is required.'),\r\n    start: yup.string().required('Start Date is required.'),\r\n    end: yup.string().required('End Date is required.'),\r\n    link: yup.string().nullable().url('Enter a valid URL')\r\n  });\r\n\r\n  const updateAdSchema = yup.object({\r\n    title: yup.string().required('Title is required.').min(4, \"Title is too short.\"),\r\n    slot: yup.string().required('Slot is required.'),\r\n    start: yup.string().required('Start Date is required.'),\r\n    end: yup.string().required('End Date is required.'),\r\n    link: yup.string().nullable().url('Enter a valid URL')\r\n  });\r\n\r\n  const closeModal = (id) => {\r\n\r\n    let element = document.getElementById(id);\r\n    let body = document.body;\r\n\r\n    body.classList.remove(\"modal-open\");\r\n    body.setAttribute(\"style\", \"\");\r\n\r\n    element.classList.remove(\"show\");\r\n    element.setAttribute(\"style\", \"display: none;\");\r\n\r\n    var elements = document.getElementsByClassName(\"modal-backdrop\");\r\n    while(elements.length > 0){\r\n        elements[0].parentNode.removeChild(elements[0]);\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    ApiRequest.get({\r\n      endpoint: 'slots',\r\n      token: token,\r\n      success: (response) => {\r\n        let res = handleSuccess(response);\r\n        setLoading(false);\r\n        let slots = res.data;\r\n        let options = [];\r\n        slots.forEach(slot => {\r\n          options.push({\r\n            value: slot.id,\r\n            label: slot.name\r\n          })\r\n        });\r\n        setOptions(options)\r\n\r\n      },\r\n      failure: (response) => {\r\n        let res = handleErrors(response);\r\n        setApiErrors(res)\r\n        setLoading(false);\r\n      }\r\n    });\r\n   \r\n  }, [])\r\n\r\n  const submitAddSlot = (values, { setSubmitting }) => {\r\n\r\n    (async () => {\r\n\r\n      let data = {\r\n        name: values.name\r\n      }\r\n\r\n      ApiRequest.post({\r\n        endpoint: `slots`,\r\n        token: token,\r\n        data: data,\r\n        success: (response) => {\r\n          let res = handleSuccess(response);\r\n          setSubmitting(false);\r\n          closeModal(\"addSlot\");\r\n          redirect(\"/redirect\", res.message,'/slots')\r\n        },\r\n        failure: (response) => {\r\n          setApiErrors(handleErrors(response))\r\n          setSubmitting(false);\r\n        }\r\n      });\r\n\r\n    })();\r\n\r\n  }\r\n\r\n  const submitUpdateSlot = (values, { setSubmitting }) => {\r\n\r\n    (async () => {\r\n\r\n      let data = {\r\n        name: values.name\r\n      }\r\n\r\n      ApiRequest.put({\r\n        endpoint: `slots/${slot.id}`,\r\n        token: token,\r\n        data: data,\r\n        success: (response) => {\r\n          let res = handleSuccess(response);\r\n          setSubmitting(false);\r\n          closeModal(\"updateSlot\");\r\n          redirect(\"/redirect\", res.message,`/slots/${slot.id}`)\r\n        },\r\n        failure: (response) => {\r\n          setApiErrors(handleErrors(response))\r\n          setSubmitting(false);\r\n        }\r\n      });\r\n\r\n    })();\r\n\r\n  }\r\n\r\n  const submitDeleteSlot = (values, { setSubmitting }) => {\r\n\r\n    (async () => {\r\n      \r\n      ApiRequest.delete({\r\n        endpoint: `slots/${slot.id}`,\r\n        token: token,\r\n        success: (response) => {\r\n          let res = handleSuccess(response);\r\n          setSubmitting(false);\r\n          closeModal(\"deleteSlot\");\r\n          redirect(\"/redirect\", res.message,'/slots')\r\n        },\r\n        failure: (response) => {\r\n          setApiErrors(handleErrors(response))\r\n          setSubmitting(false);\r\n        }\r\n      });\r\n\r\n    })();\r\n\r\n  }\r\n\r\n\r\n  const submitAddAd = (values, { setSubmitting }) => {\r\n\r\n    (async () => {\r\n\r\n      let start = DateTime.fromJSDate(values.start).toFormat('yyyy/MM/dd');\r\n      let end = DateTime.fromJSDate(values.end).toFormat('yyyy/MM/dd');\r\n\r\n      const data = new FormData()\r\n      data.append('slot_id', values.slot)\r\n      data.append('title', values.title)\r\n      data.append('image', values.image)\r\n      data.append('link', values.link)\r\n      data.append('start', start)\r\n      data.append('end', end)\r\n\r\n      ApiRequest.post({\r\n        endpoint: `ads`,\r\n        token: token,\r\n        data: data,\r\n        success: (response) => {\r\n          let res = handleSuccess(response);\r\n          setSubmitting(false);\r\n          closeModal(\"addAd\");\r\n          redirect(\"/redirect\", res.message, '/ads')\r\n        },\r\n        failure: (response) => {\r\n          setApiErrors(handleErrors(response))\r\n          setSubmitting(false);\r\n        }\r\n      });\r\n\r\n    })();\r\n\r\n  }\r\n\r\n  const submitUpdateAd = (values, { setSubmitting }) => {\r\n\r\n    (async () => {\r\n\r\n      let start = DateTime.fromJSDate(values.start).toFormat('yyyy/MM/dd');\r\n      let end = DateTime.fromJSDate(values.end).toFormat('yyyy/MM/dd');\r\n\r\n      const data = new FormData()\r\n      data.append('slot_id', values.slot)\r\n      data.append('title', values.title)\r\n      data.append('image', values.image)\r\n      data.append('link', values.link)\r\n      data.append('start', start)\r\n      data.append('end', end)\r\n\r\n      ApiRequest.post({\r\n        endpoint: `ads`,\r\n        token: token,\r\n        data: data,\r\n        success: (response) => {\r\n          let res = handleSuccess(response);\r\n          setSubmitting(false);\r\n          closeModal(\"addAd\");\r\n          redirect(\"/redirect\", res.message, '/ads')\r\n        },\r\n        failure: (response) => {\r\n          setApiErrors(handleErrors(response))\r\n          setSubmitting(false);\r\n        }\r\n      });\r\n\r\n    })();\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      {/* Add New Slot */}\r\n      <Formik initialValues={addSlotInitialValues} enableReinitialize={true} validationSchema={addSlotSchema} validator={() => ({})} onSubmit={submitAddSlot}>\r\n        {({ values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }) => (\r\n          <Form autoComplete=\"off\">\r\n            <Modal title=\"Add New Slot\" id=\"addSlot\" cancelText=\"Close\" submitText=\"Add\" submitClass=\"btn-success\" submitDisabled={isSubmitting} isSubmitting={isSubmitting} onSubmit={handleSubmit} onCancel={resetForm} >\r\n              <div className=\"row row-sm mg-b-10\">\r\n                <div className=\"col-sm-12\">\r\n                  <ApiErrors errors={apiErrors}/>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <ApiErrors errors={apiErrors}/>\r\n                  <Field type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" placeholder=\"Slot Name\" autoComplete=\"off\" />\r\n                  <ErrorMessage name=\"name\" component={TextError} />\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      {/* Update Slot */}\r\n      <Formik initialValues={updateSlotInitialValues} enableReinitialize={true} validationSchema={updateSlotSchema} validator={() => ({})} onSubmit={submitUpdateSlot}>\r\n        {({ values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }) => (\r\n          <Form autoComplete=\"off\">\r\n            <Modal title=\"Add New Slot\" id=\"updateSlot\" cancelText=\"Close\" submitText=\"Add\" submitClass=\"btn-success\" submitDisabled={isSubmitting} isSubmitting={isSubmitting} onSubmit={handleSubmit} onCancel={resetForm} >\r\n              <div className=\"row row-sm mg-b-10\">\r\n                <div className=\"col-sm-12\">\r\n                  <ApiErrors errors={apiErrors}/>\r\n                  <Field type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" placeholder=\"Slot Name\" autoComplete=\"off\" />\r\n                  <ErrorMessage name=\"name\" component={TextError} />\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      {/* Delete Slot */}\r\n      <Formik initialValues={deleteSlotInitialValues} enableReinitialize={true} validationSchema={null} onSubmit={submitDeleteSlot}>\r\n        {(formik) => {\r\n          const { values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting } = formik;\r\n          return (\r\n            <Form autoComplete=\"off\">\r\n              <Modal title=\"Delete Slot\" id=\"deleteSlot\" cancelText=\"Cancel\" submitText=\"Delete\" submitClass=\"btn-danger\" submitDisabled={isSubmitting} isSubmitting={isSubmitting} onSubmit={handleSubmit} onCancel={resetForm}>\r\n                <p>This slot will be permanently deleted.</p>\r\n                <div className=\"row row-sm mg-b-10\">\r\n                  <div className=\"col-sm-12\">\r\n                    <ApiErrors errors={apiErrors} />\r\n                    <Field type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" placeholder=\"Slot Name\" autoComplete=\"off\" disabled={true} />\r\n                  </div>\r\n                </div>\r\n              </Modal>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n\r\n\r\n\r\n      {/* Add New Ad */}\r\n      <Formik initialValues={addAdInitialValues} enableReinitialize={true} validationSchema={addAdSchema} validator={() => ({})} onSubmit={submitAddAd}>\r\n        {({ values, handleChange, handleSubmit, setFieldValue, setFieldTouched, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }) => (\r\n          <Form autoComplete=\"off\">\r\n            <Modal title=\"Add New Advert\" id=\"addAd\" cancelText=\"Cancel\" submitText=\"Add\" submitClass=\"btn-success\" submitDisabled={isSubmitting} isSubmitting={isSubmitting} onSubmit={handleSubmit} onCancel={resetForm} >\r\n              <div className=\"row row-sm mg-b-10\">\r\n                <div className=\"col-sm-12\">\r\n                  <ApiErrors errors={apiErrors} />\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"slot\">Slot</label>\r\n                    <Select name=\"slot\" id=\"slot\" onChange={(slot) => setFieldValue('slot', slot.value)} onBlur={() => setFieldTouched('slot',true)} options={options} />\r\n                    <ErrorMessage name=\"slot\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"image\">Title</label>\r\n                  <Field type=\"text\" id=\"title\" name=\"title\" className=\"form-control\" placeholder=\"Ad Title\" autoComplete=\"off\" />\r\n                  <ErrorMessage name=\"title\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"image\">Image</label>\r\n                    <input type=\"file\" className=\"form-control\" name=\"image\" id=\"image\" onBlur={() => setFieldTouched('image', true)} onChange={(event) => {\r\n                      setFieldValue(\"image\", event.currentTarget.files[0]);\r\n                    }}/>\r\n                    <ErrorMessage name=\"image\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"image\">Link</label>\r\n                    <Field type=\"text\" id=\"link\" name=\"link\" className=\"form-control\" placeholder=\"Ad Link\" autoComplete=\"off\" />\r\n                    <ErrorMessage name=\"link\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"start\">Start Date</label>\r\n                    <DatePicker className=\"form-control\" selected={values.start} onBlur={() => setFieldTouched('start', true)} onChange={(date) => setFieldValue('start', date)} isClearable closeOnScroll={true} dateFormat=\"yyyy/MM/dd\" />\r\n                    <ErrorMessage name=\"start\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"end\">End Date</label>\r\n                    <DatePicker className=\"form-control\" selected={values.end} onBlur={() => setFieldTouched('end', true)} onChange={(date) => setFieldValue('end', date)} isClearable closeOnScroll={true} dateFormat=\"yyyy/MM/dd\" />\r\n                    <ErrorMessage name=\"end\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                {/* <DisplayFormikState {...{ values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }} /> */}\r\n              </div>\r\n            </Modal>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      {/* Update Ad */}\r\n      <Formik initialValues={updateAdInitialValues} enableReinitialize={true} validationSchema={updateAdSchema} validator={() => ({})} onSubmit={submitUpdateAd}>\r\n        {({ values, handleChange, handleSubmit, setFieldValue, setFieldTouched, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }) => (\r\n          <Form autoComplete=\"off\">\r\n            <Modal title=\"Update Advert\" id=\"updateAd\" cancelText=\"Cancel\" submitText=\"Update\" submitClass=\"btn-success\" submitDisabled={isSubmitting} isSubmitting={isSubmitting} onSubmit={handleSubmit} onCancel={resetForm} >\r\n              <div className=\"row row-sm mg-b-10\">\r\n                <div className=\"col-sm-12\">\r\n                  <ApiErrors errors={apiErrors} />\r\n                  {JSON.stringify(ad,2)}\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"slot\">Slot</label>\r\n                    <Select name=\"slot\" id=\"slot\" defaultValue={{ label: ad && ad.slot_name, value: ad && ad.slot_id }} onChange={(slot) => setFieldValue('slot', slot.value)} onBlur={() => setFieldTouched('slot', true)} options={options} />\r\n                    <ErrorMessage name=\"slot\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"image\">Title</label>\r\n                    <Field type=\"text\" id=\"title\" name=\"title\" className=\"form-control\" placeholder=\"Ad Title\" autoComplete=\"off\" />\r\n                    <ErrorMessage name=\"title\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"image\">Image</label>\r\n                    <input type=\"file\" className=\"form-control\" name=\"image\" id=\"image\" onBlur={() => setFieldTouched('image', true)} onChange={(event) => {\r\n                      setFieldValue(\"image\", event.currentTarget.files[0]);\r\n                    }} />\r\n                    <ErrorMessage name=\"image\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"image\">Link</label>\r\n                    <Field type=\"text\" id=\"link\" name=\"link\" className=\"form-control\" placeholder=\"Ad Link\" autoComplete=\"off\" />\r\n                    <ErrorMessage name=\"link\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"start\">Start Date</label>\r\n                    <DatePicker className=\"form-control\" selected={values.start} onBlur={() => setFieldTouched('start', true)} onChange={(date) => setFieldValue('start', date)} isClearable closeOnScroll={true} dateFormat=\"yyyy/MM/dd\" />\r\n                    <ErrorMessage name=\"start\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-12\">\r\n                  <div className=\"form-group\">\r\n                    <label for=\"end\">End Date</label>\r\n                    <DatePicker className=\"form-control\" selected={values.end} onBlur={() => setFieldTouched('end', true)} onChange={(date) => setFieldValue('end', date)} isClearable closeOnScroll={true} dateFormat=\"yyyy/MM/dd\" />\r\n                    <ErrorMessage name=\"end\" component={TextError} />\r\n                  </div>\r\n                </div>\r\n                <DisplayFormikState {...{ values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }} />\r\n              </div>\r\n            </Modal>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Forms;","import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Modal = ({ title, children, submitText, cancelText, submitClass, submitDisabled, onSubmit, onCancel, id, isSubmitting }) => {\r\n\r\n  const submitRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    submitRef.current.classList.add(submitClass);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"demo-modal-static\">\r\n      <div className=\"modal\" tabIndex=\"-1\" id={id} role=\"dialog\">\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h2 className=\"modal-title\">{title}</h2>\r\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={onCancel}>\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {children}\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button type=\"button\" className=\"btn btn-secondary\" onClick={onCancel} data-dismiss=\"modal\">{cancelText}</button>\r\n              <button type=\"button\" ref={submitRef} disabled={submitDisabled} className=\"btn\" onClick={onSubmit}>\r\n                {isSubmitting ? <><span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading... </> : submitText }\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nModal.defaultProps = {\r\n  buttonText: \"Submit\",\r\n  cancelText: \"Cancel\",\r\n  submitClass: \"btn-primary\",\r\n  submitDisabled: false,\r\n  isSubmitting: false,\r\n  onCancel: null\r\n};\r\n\r\nModal.propTypes = {\r\n  buttonText: PropTypes.string.isRequired,\r\n  cancelText: PropTypes.string.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired,\r\n  submitClass: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  submitDisabled: PropTypes.bool.isRequired,\r\n  isSubmitting: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Modal;","import React from 'react'\r\n\r\nfunction TextError(props) {\r\n  return (\r\n    <div className=\"tx-danger\">\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextError;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div>\r\n        <span>Copyright &copy; 2021 Fumigation Solutions </span>\r\n        <span>Developed by <a href=\"https://afriblocks.com\">AfriBlocks</a></span>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React, { useState, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { GlobalContext } from '../GlobalContext';\r\n\r\nconst Header = ({title, active}) => {\r\n\r\nconst { logout } = useContext(GlobalContext);\r\n\r\nconst activeLink = (identifier) => {\r\n  let classes = \"btn btn-sm pd-x-15 btn-white btn-uppercase mg-l-5\";\r\n\r\n  if(identifier === active) classes += \" active-link\";\r\n\r\n  return classes;\r\n}\r\n\r\n  return (\r\n    <div className=\"header-container\">\r\n      <center><img src=\"/logo.jpg\" style={{maxWidth:'100%',marginBottom:30}}/></center>\r\n      <div className=\"d-sm-flex align-items-center justify-content-between mg-b-20 mg-lg-b-25 mg-xl-b-30\">\r\n        <div>\r\n          <h1 className=\"mg-b-0 tx-spacing--1\">{title}</h1>\r\n        </div>\r\n        <div className=\"d-none d-md-block\">\r\n          <Link to=\"/\" className={activeLink(\"dashboard\")}>Dashboard</Link>\r\n          <Link to=\"/slots\" className={activeLink(\"slots\")}>Slots</Link>\r\n          <Link to=\"/ads\" className={activeLink(\"ads\")}>Ads</Link>\r\n          <button onClick={() => logout()} className=\"btn btn-sm pd-x-15 btn-primary btn-uppercase mg-l-5\" style={{backgroundColor:'#000', borderColor: '#000'}}><i data-feather=\"link\" className=\"wd-10 mg-r-5\"></i> Logout</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\n// Header.defaultProps = {\r\n//   title: \"Dashboard\"\r\n// };\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  active: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst Page = (props) => {\r\n  return (\r\n    <>\r\n    <div className=\"content content-fixed\">\r\n      <div className=\"container pd-x-0 pd-lg-x-10 pd-xl-x-0\">\r\n          {props.children}\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Page;","import axios from 'axios';\r\nimport { API_URL } from '../Config';\r\nconst API = axios.create({ baseURL: API_URL, responseType: 'json' });\r\n\r\nconst setHeaders = (token, contentType) => {\r\n\r\n  let headers = {\r\n    Accept: \"application/json\"\r\n  }\r\n\r\n  if (contentType) headers[\"Content-Type\"] = contentType;\r\n  if (token) headers.Authorization = `Bearer ${token}`;\r\n\r\n  return { headers };\r\n}\r\n\r\n\r\n\r\n\r\nexport const ApiRequest = {\r\n  get: ({ baseUrl = null, endpoint, token = null, contentType = null, success, failure }) => {\r\n    if (baseUrl) API.defaults.baseURL = baseUrl;\r\n    return API.get(endpoint, setHeaders(token, contentType))\r\n      .then(async (response) => await success(response))\r\n      .catch((error) => failure(error) );\r\n  },\r\n  post: ({ endpoint, token = null, contentType = null, data, success, failure }) => {\r\n    return API.post(endpoint, data, setHeaders(token, contentType))\r\n      .then(async (response) => await success(response))\r\n      .catch((error) => failure(error));\r\n  },\r\n  put: ({ endpoint, token = null, contentType = null, data, success, failure }) => {\r\n    return API.put(endpoint, data, setHeaders(token, contentType))\r\n      .then(async (response) => await success(response))\r\n      .catch((error) => failure(error));\r\n  },\r\n  delete: ({ endpoint, token = null, contentType = null, success, failure }) => {\r\n    return API.delete(endpoint, setHeaders(token, contentType))\r\n      .then(async (response) => await success(response))\r\n      .catch((error) => failure(error));\r\n  }\r\n};\r\n\r\nexport const handleSuccess = (response) => {\r\n  return response.data;\r\n}\r\n\r\nexport const handleErrors = (response) => {\r\n\r\n  // if(response.response === undefined){\r\n  //   window.location.replace('/logout')\r\n  // }\r\n\r\n  // return []\r\n\r\n  if(response.response && typeof response.response.data !== undefined ) {\r\n    return response.response.data.errors ?? [{error: response.response.data.message}];\r\n  }else{\r\n    window.location.replace('/logout');\r\n  }\r\n\r\n}\r\n\r\n// Usage Example\r\nfunction usageExample() {\r\n  ApiRequest.post({\r\n    endpoint: 'auth/login',\r\n    // token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9',\r\n    // contentType: 'application/json',\r\n    data: {},\r\n    success: (response) => { },\r\n    failure: (response) => { }\r\n  });\r\n}"],"names":[],"sourceRoot":""}