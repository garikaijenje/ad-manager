{"version":3,"file":"react_pages_Slot_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AADA;;AAQA;AAAA;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AADA;;AAQA;AAAA;AAAA;AAEA;AAGA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAQA;;AAEA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AADA;;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAEA;AAAA;AAAA;AAAA;AAyDA;AAAA;AAIA;;AAEA;;;;;;;;;;ACrLA","sources":["webpack://ad-manager/./react/components/AdsTable.js","webpack://ad-manager/./react/pages/Slot.js","webpack://ad-manager/ignored|C:\\Projects\\MyProjects\\1.PHP\\ad-manager\\node_modules\\htmlparser2\\lib|readable-stream"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport { GlobalContext } from '../GlobalContext';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AdsTable = ({ loading, ads, slotColumn}) => {\r\n\r\n  const { redirect } = useContext(GlobalContext);\r\n\r\n  useEffect(() => {\r\n\r\n    jQuery('#example1').DataTable({\r\n      language: {\r\n        searchPlaceholder: 'Search...',\r\n        sSearch: '',\r\n        lengthMenu: '_MENU_ items/page',\r\n      }\r\n    });\r\n    // Select2\r\n    jQuery('.dataTables_length select').select2({ minimumResultsForSearch: Infinity });\r\n\r\n\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    jQuery('#example1').DataTable({\r\n      language: {\r\n        searchPlaceholder: 'Search...',\r\n        sSearch: '',\r\n        lengthMenu: '_MENU_ items/page',\r\n      }\r\n    });\r\n    // Select2\r\n    jQuery('.dataTables_length select').select2({ minimumResultsForSearch: Infinity });\r\n\r\n  }, [ads])\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      {loading ? <center><PulseLoader color=\"#9d1e29\" loading={loading} size={20} /></center> :\r\n\r\n        ads && ads.length === 0 ? <center><h3>You don't have any ads.</h3></center> :\r\n\r\n          <div data-label=\"Example\" className=\"df-example demo-table\">\r\n            <table id=\"example1\" className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"wd-20p\">Title</th>\r\n                  {slotColumn && <th className=\"wd-20p\">Slot</th>}\r\n                  <th className=\"wd-5p\">Status</th>\r\n                  <th className=\"wd-5p\">Impressions</th>\r\n                  <th className=\"wd-5p\">Clicks</th>\r\n                  <th className=\"wd-15p\">Duration</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {ads && ads.map((ad, key) => {\r\n                  return (\r\n                    <tr key={key} >\r\n                      <td onClick={() => redirect(`/ads/${ad.id}`)}>{ad.title}</td>\r\n                      {slotColumn && <td onClick={() => redirect(`/ads/${ad.id}`)}>{ad.slot_name}</td>}\r\n                      <td className={ad.status === \"Active\" ? \"tx-success\" : ad.status === \"Pending\" ? \"tx-warning\" : \"tx-danger\"} onClick={() => redirect(`/ads/${ad.id}`)}>{ad.status}</td>\r\n                      <td onClick={() => redirect(`/ads/${ad.id}`)}>{ad.impressions}</td>\r\n                      <td onClick={() => redirect(`/ads/${ad.id}`)}>{ad.clicks}</td>\r\n                      <td className={ad.status === \"Active\" ? \"tx-success\" : ad.status === \"Pending\" ? \"tx-warning\" : \"tx-danger\"} onClick={() => redirect(`/ads/${ad.id}`)}>{ad.status === \"Active\" ? `Expires on ${ad.end}` : ad.status === \"Pending\" ? `Starts on ${ad.start}` : `Expired on ${ad.end}`}</td>\r\n                    </tr>\r\n                  )\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n      }\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nAdsTable.defaultProps = {\r\n  slotColumn: true\r\n};\r\n\r\nAdsTable.propTypes = {\r\n  slotColumn: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default AdsTable;","import React, { useState, useEffect, useContext } from 'react';\r\nimport Page from '../layouts/Page';\r\nimport Header from '../layouts/Header';\r\nimport Footer from '../layouts/Footer';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ApiRequest, handleErrors, handleSuccess } from '../utility/Api';\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\n\r\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\n\r\nimport { GlobalContext } from '../GlobalContext';\r\nimport Modal from '../components/Modal';\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport TextError from '../components/TextError';\r\nimport { DisplayFormikState } from '../utility/Helpers';\r\nimport AdsTable from '../components/AdsTable';\r\nimport Forms from '../components/Forms';\r\n\r\nconst Slots = ({ match }) => {\r\n\r\n  const { token, logout, redirect, setToken, location } = useContext(GlobalContext);\r\n\r\n  const [slot, setSlot] = useState(null);\r\n  const [errors, setErrors] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    // Fetch Slot\r\n    (async () => {\r\n\r\n      setLoading(true);\r\n\r\n      ApiRequest.get({\r\n        endpoint: `slots/${match.params.id}`,\r\n        token: token,\r\n        success: (response) => {\r\n          let res = handleSuccess(response);\r\n          setLoading(false);\r\n          setSlot(res.data)\r\n        },\r\n        failure: (response) => {\r\n          let res = handleErrors(response);\r\n          setErrors(res)\r\n          setLoading(false);\r\n        }\r\n      });\r\n\r\n    })();\r\n\r\n  }, [])\r\n\r\n  const initialValues = { name: \"\" };\r\n\r\n  const validationSchema = yup.object({\r\n    name: yup.string().required('Slot name is required.').min(4, \"Slot name is too short.\")\r\n  });\r\n\r\n  const submitAddSlot = (values, { setSubmitting }) => {\r\n    \r\n    (async () => {\r\n      alert(JSON.stringify(values, null, 2));\r\n      setSubmitting(false);\r\n    })();\r\n\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <Header title={loading ? <PulseLoader color=\"#9d1e29\" loading={loading} size={20} /> : (slot && slot.name)} active=\"slots\" />\r\n\r\n      <div className=\"card-header bd-b-0 pd-t-20 pd-lg-t-25 pd-l-20 pd-lg-l-25 d-flex flex-column flex-sm-row align-items-sm-center justify-content-sm-center\">\r\n        <div className=\"btn-group mg-t-20 mg-sm-t-0\">\r\n          <button href=\"#addSlot\" className=\"btn btn-xs btn-success btn-uppercase\" data-toggle=\"modal\">Add New Slot</button>\r\n          <button href=\"#updateSlot\" className=\"btn btn-xs btn-warning btn-uppercase\" data-toggle=\"modal\">Update Slot</button>\r\n          <button href=\"#deleteSlot\" className=\"btn btn-xs btn-danger btn-uppercase\" data-toggle=\"modal\">Delete Slot</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n      <div className=\"col-12\">\r\n          {location.flash && (<div className=\"alert alert-success mt-4\" role=\"alert\"> {location.flash} </div>)}\r\n      </div>\r\n\r\n      <div className=\"col-sm-12\">\r\n        <div className=\"card mg-b-20 mg-lg-b-25\">\r\n          <div className=\"card-header pd-y-15 pd-x-20 d-flex align-items-center justify-content-between\">\r\n              <h6 className=\"tx-uppercase tx-semibold mg-b-0\">Place the following code where you want your ads to appear</h6>\r\n          </div>\r\n          <div className=\"card-body pd-20 pd-lg-25\">\r\n              <div className=\"bd bg-gray-50 pd-y-15 pd-x-15 pd-sm-x-20 codebox\">\r\n                <p className=\"mg-b-0 tx-14\">{loading ? <PulseLoader color=\"#ff9c5b\" loading={loading} size={10} /> : (slot && ReactHtmlParser(slot.code_slot))}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"col-sm-12\">\r\n        <div className=\"card mg-b-20 mg-lg-b-25\">\r\n          <div className=\"card-header pd-y-15 pd-x-20 d-flex align-items-center justify-content-between\">\r\n              <h6 className=\"tx-uppercase tx-semibold mg-b-0\">Include the following script <strong>only once</strong> in your footer</h6>\r\n          </div>\r\n          <div className=\"card-body pd-20 pd-lg-25\">\r\n            <div className=\"bd bg-gray-50 pd-y-15 pd-x-15 pd-sm-x-20 codebox\">\r\n                <p className=\"mg-b-0 tx-14\">{loading ? <PulseLoader color=\"#ff9c5b\" loading={loading} size={10} /> : (slot && ReactHtmlParser(slot.code_script))}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n\r\n\r\n      <div className=\"col-sm-12\">\r\n\r\n      <AdsTable loading={loading} ads={slot ? slot.ads : []} slotColumn={false} /> \r\n        \r\n      </div>\r\n      \r\n      </div>\r\n\r\n      {/* <Formik initialValues={initialValues} enableReinitialize={true} validationSchema={validationSchema} validator={() => ({})} onSubmit={submitAddSlot}>\r\n            {({ values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty,resetForm, isSubmitting }) => (\r\n              <Form autoComplete=\"off\">\r\n                <Modal title=\"Add New Slot\" id=\"newSlot\" cancelText=\"Cancel\" submitText=\"Add\" submitClass=\"btn-success\" submitDisabled={!(dirty && isValid) && isSubmitting} isSubmitting={isSubmitting} onSubmit={handleSubmit} onCancel={resetForm}>\r\n                  <div className=\"row row-sm mg-b-10\">\r\n                    <div className=\"col-sm-12\">\r\n                      <Field type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" placeholder=\"Slot Name\" autoComplete=\"off\" />\r\n                      <ErrorMessage name=\"name\" component={TextError} />\r\n                    </div>\r\n                    <DisplayFormikState {...{ values, handleChange, handleSubmit, setFieldValue, errors, touched, handleBlur, isValid, dirty, resetForm, isSubmitting }} />\r\n                  </div>\r\n                </Modal>\r\n              </Form>\r\n            )}\r\n        </Formik> */}\r\n\r\n      {/* <Formik initialValues={initialValues} enableReinitialize={true} validationSchema={validationSchema} onSubmit={submitAddSlot}>\r\n          {(formik) => {\r\n            const {values,handleChange,handleSubmit,setFieldValue,errors,touched,handleBlur,isValid,dirty,resetForm} = formik;\r\n            return (\r\n              <Form autoComplete=\"off\">\r\n                <Modal title=\"Update Slot\" id=\"updateSlot\" cancelText=\"Cancel\" submitText=\"Update\" submitClass=\"btn-warning\" submitDisabled={!(dirty && isValid)} onSubmit={handleSubmit} onCancel={resetForm}>\r\n                  <div className=\"row row-sm mg-b-10\">\r\n                    <div className=\"col-sm-12\">\r\n                      <Field type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" placeholder=\"Slot Name\" autoComplete=\"off\" value=\"Slot #1\" />\r\n                      <ErrorMessage name=\"name\" component={TextError} />\r\n                    </div>\r\n                  </div>\r\n                </Modal>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik> */}\r\n\r\n      {/* <Formik initialValues={initialValues} enableReinitialize={true} validationSchema={validationSchema} onSubmit={submitAddSlot}>\r\n          {(formik) => {\r\n            const {values,handleChange,handleSubmit,setFieldValue,errors,touched,handleBlur,isValid,dirty,resetForm} = formik;\r\n            return (\r\n              <Form autoComplete=\"off\">\r\n                <Modal title=\"Delete Slot\" id=\"deleteSlot\" cancelText=\"Cancel\" submitText=\"Delete\" submitClass=\"btn-danger\" onSubmit={handleSubmit} onCancel={resetForm}>\r\n                  <p>The slot will be permanently deleted.</p>\r\n                  <div className=\"row row-sm mg-b-10\">\r\n                    <div className=\"col-sm-12\">\r\n                      <Field type=\"text\" id=\"name\" name=\"name\" className=\"form-control\" placeholder=\"Slot Name\" autoComplete=\"off\" value=\"Slot 1\" disabled={true} />\r\n                    </div>\r\n                  </div>\r\n                </Modal>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik> */}\r\n      <Forms slot={slot}/>\r\n      <Footer />\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Slots;","/* (ignored) */"],"names":[],"sourceRoot":""}